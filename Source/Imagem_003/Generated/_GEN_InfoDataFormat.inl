		case imDF::DF_NONE:     			spp = 0    						; bpp = 0    							; chanels = 0;      				hasAlpha = 0;      				glDataFormat = imDF::DF_NONE;       	glInternalFormat = imGLIFormat::GL_IFORMAT_NONE;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_NONE;        						break;
		case imDF::DF_INDEX:     			spp = 1    						; bpp = 8								; chanels = 1;      				hasAlpha = 0;      				glDataFormat = imDF::DF_BGR_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_NONE;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_NONE;        						break;
		case imDF::DF_L_8u:     			spp = sizeof(r_8u)    			; bpp = 8*sizeof(r_8u)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_UNSIGNED_BYTE;        						break;
		//case imDF::DF_L_8s:     			spp = sizeof(r_8s)    			; bpp = 8*sizeof(r_8s)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_8s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_BYTE;        						break;
		case imDF::DF_L_16u:     			spp = sizeof(r_16u)    			; bpp = 8*sizeof(r_16u)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_16u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_UNSIGNED_SHORT;        						break;
		//case imDF::DF_L_16s:     			spp = sizeof(r_16s)    			; bpp = 8*sizeof(r_16s)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_16s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_SHORT;        						break;
		case imDF::DF_L_16f:     			spp = sizeof(r_16f)    			; bpp = 8*sizeof(r_16f)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_16f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_HALF_FLOAT;        						break;
		case imDF::DF_L_32u:     			spp = sizeof(r_32u)    			; bpp = 8*sizeof(r_32u)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_32u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_UNSIGNED_INT;        						break;
		//case imDF::DF_L_32s:     			spp = sizeof(r_32s)    			; bpp = 8*sizeof(r_32s)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_32s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_INT;        						break;
		case imDF::DF_L_32f:     			spp = sizeof(r_32f)    			; bpp = 8*sizeof(r_32f)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_32f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_FLOAT;        						break;
		//case imDF::DF_L_64f:     			spp = sizeof(r_64f)    			; bpp = 8*sizeof(r_64f)        			; chanels = 1;      				hasAlpha = false;      				glDataFormat = imDF::DF_L_64f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RED;      			glFormat = imGLFormat::GL_FORMAT_RED;      					glType = imGLType::GL_DOUBLE;        						break;
		case imDF::DF_LA_8u:     			spp = sizeof(rg_8u)    			; bpp = 8*sizeof(rg_8u)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_UNSIGNED_BYTE;        						break;
		//case imDF::DF_LA_8s:     			spp = sizeof(rg_8s)    			; bpp = 8*sizeof(rg_8s)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_8s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_BYTE;        						break;
		case imDF::DF_LA_16u:     			spp = sizeof(rg_16u)    			; bpp = 8*sizeof(rg_16u)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_16u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_UNSIGNED_SHORT;        						break;
		//case imDF::DF_LA_16s:     			spp = sizeof(rg_16s)    			; bpp = 8*sizeof(rg_16s)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_16s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_SHORT;        						break;
		case imDF::DF_LA_16f:     			spp = sizeof(rg_16f)    			; bpp = 8*sizeof(rg_16f)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_16f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_HALF_FLOAT;        						break;
		case imDF::DF_LA_32u:     			spp = sizeof(rg_32u)    			; bpp = 8*sizeof(rg_32u)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_32u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_UNSIGNED_INT;        						break;
		//case imDF::DF_LA_32s:     			spp = sizeof(rg_32s)    			; bpp = 8*sizeof(rg_32s)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_32s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_INT;        						break;
		case imDF::DF_LA_32f:     			spp = sizeof(rg_32f)    			; bpp = 8*sizeof(rg_32f)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_32f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_FLOAT;        						break;
		//case imDF::DF_LA_64f:     			spp = sizeof(rg_64f)    			; bpp = 8*sizeof(rg_64f)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_64f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_DOUBLE;        						break;
		case imDF::DF_RGB_8u:     			spp = sizeof(rgb_8u)    			; bpp = 8*sizeof(rgb_8u)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_UNSIGNED_BYTE;        						break;
		case imDF::DF_BGR_8u:     			spp = sizeof(bgr_8u)    			; bpp = 8*sizeof(bgr_8u)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_UNSIGNED_BYTE;        						break;
		//case imDF::DF_RGB_8s:     			spp = sizeof(rgb_8s)    			; bpp = 8*sizeof(rgb_8s)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_8s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_BYTE;        						break;
		//case imDF::DF_BGR_8s:     			spp = sizeof(bgr_8s)    			; bpp = 8*sizeof(bgr_8s)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_8s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_BYTE;        						break;
		case imDF::DF_RGB_16u:     			spp = sizeof(rgb_16u)    			; bpp = 8*sizeof(rgb_16u)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_16u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_UNSIGNED_SHORT;        						break;
		case imDF::DF_BGR_16u:     			spp = sizeof(bgr_16u)    			; bpp = 8*sizeof(bgr_16u)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_16u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_UNSIGNED_SHORT;        						break;
		//case imDF::DF_RGB_16s:     			spp = sizeof(rgb_16s)    			; bpp = 8*sizeof(rgb_16s)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_16s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_SHORT;        						break;
		//case imDF::DF_BGR_16s:     			spp = sizeof(bgr_16s)    			; bpp = 8*sizeof(bgr_16s)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_16s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_SHORT;        						break;
		case imDF::DF_RGB_16f:     			spp = sizeof(rgb_16f)    			; bpp = 8*sizeof(rgb_16f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_16f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_HALF_FLOAT;        						break;
		case imDF::DF_BGR_16f:     			spp = sizeof(bgr_16f)    			; bpp = 8*sizeof(bgr_16f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_16f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_HALF_FLOAT;        						break;
		case imDF::DF_RGB_32u:     			spp = sizeof(rgb_32u)    			; bpp = 8*sizeof(rgb_32u)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_32u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_UNSIGNED_INT;        						break;
		case imDF::DF_BGR_32u:     			spp = sizeof(bgr_32u)    			; bpp = 8*sizeof(bgr_32u)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_32u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_UNSIGNED_INT;        						break;
		//case imDF::DF_RGB_32s:     			spp = sizeof(rgb_32s)    			; bpp = 8*sizeof(rgb_32s)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_32s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_INT;        						break;
		//case imDF::DF_BGR_32s:     			spp = sizeof(bgr_32s)    			; bpp = 8*sizeof(bgr_32s)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_32s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_INT;        						break;
		case imDF::DF_RGB_32f:     			spp = sizeof(rgb_32f)    			; bpp = 8*sizeof(rgb_32f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_32f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_FLOAT;        						break;
		case imDF::DF_BGR_32f:     			spp = sizeof(bgr_32f)    			; bpp = 8*sizeof(bgr_32f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_32f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_FLOAT;        						break;
		//case imDF::DF_RGB_64f:     			spp = sizeof(rgb_64f)    			; bpp = 8*sizeof(rgb_64f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_64f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_DOUBLE;        						break;
		//case imDF::DF_BGR_64f:     			spp = sizeof(bgr_64f)    			; bpp = 8*sizeof(bgr_64f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_64f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_DOUBLE;        						break;
		case imDF::DF_RGBA_8u:     			spp = sizeof(rgba_8u)    			; bpp = 8*sizeof(rgba_8u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_BYTE;        						break;
		case imDF::DF_ARGB_8u:     			spp = sizeof(argb_8u)    			; bpp = 8*sizeof(argb_8u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_ARGB_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_UNSIGNED_INT_8_8_8_8_REV;        						break;
		case imDF::DF_BGRA_8u:     			spp = sizeof(bgra_8u)    			; bpp = 8*sizeof(bgra_8u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_UNSIGNED_BYTE;        						break;
		case imDF::DF_ABGR_8u:     			spp = sizeof(abgr_8u)    			; bpp = 8*sizeof(abgr_8u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_ABGR_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_INT_8_8_8_8_REV;        						break;
		//case imDF::DF_RGBA_8s:     			spp = sizeof(rgba_8s)    			; bpp = 8*sizeof(rgba_8s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_8s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_BYTE;        						break;
		//case imDF::DF_ARGB_8s:     			spp = sizeof(argb_8s)    			; bpp = 8*sizeof(argb_8s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_8s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_BYTE;        						break;
		//case imDF::DF_BGRA_8s:     			spp = sizeof(bgra_8s)    			; bpp = 8*sizeof(bgra_8s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_8s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_BYTE;        						break;
		//case imDF::DF_ABGR_8s:     			spp = sizeof(abgr_8s)    			; bpp = 8*sizeof(abgr_8s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_ABGR_8s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_BYTE;        						break;
		case imDF::DF_RGBA_16u:     			spp = sizeof(rgba_16u)    			; bpp = 8*sizeof(rgba_16u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_SHORT;        						break;
		case imDF::DF_BGRA_16u:     			spp = sizeof(bgra_16u)    			; bpp = 8*sizeof(bgra_16u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_16u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_UNSIGNED_SHORT;        						break;
		case imDF::DF_ARGB_16u:     			spp = sizeof(argb_16u)    			; bpp = 8*sizeof(argb_16u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_UNSIGNED_SHORT;        						break;
		case imDF::DF_ABGR_16u:     			spp = sizeof(abgr_16u)    			; bpp = 8*sizeof(abgr_16u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_UNSIGNED_SHORT;        						break;
		//case imDF::DF_RGBA_16s:     			spp = sizeof(rgba_16s)    			; bpp = 8*sizeof(rgba_16s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_SHORT;        						break;
		//case imDF::DF_BGRA_16s:     			spp = sizeof(bgra_16s)    			; bpp = 8*sizeof(bgra_16s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_16s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_SHORT;        						break;
		//case imDF::DF_ARGB_16s:     			spp = sizeof(argb_16s)    			; bpp = 8*sizeof(argb_16s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_SHORT;        						break;
		//case imDF::DF_ABGR_16s:     			spp = sizeof(abgr_16s)    			; bpp = 8*sizeof(abgr_16s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_SHORT;        						break;
		case imDF::DF_RGBA_16f:     			spp = sizeof(rgba_16f)    			; bpp = 8*sizeof(rgba_16f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_HALF_FLOAT;        						break;
		case imDF::DF_BGRA_16f:     			spp = sizeof(bgra_16f)    			; bpp = 8*sizeof(bgra_16f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_16f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_HALF_FLOAT;        						break;
		case imDF::DF_ARGB_16f:     			spp = sizeof(argb_16f)    			; bpp = 8*sizeof(argb_16f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_HALF_FLOAT;        						break;
		case imDF::DF_ABGR_16f:     			spp = sizeof(abgr_16f)    			; bpp = 8*sizeof(abgr_16f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_16f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_HALF_FLOAT;        						break;
		case imDF::DF_RGBA_32u:     			spp = sizeof(rgba_32u)    			; bpp = 8*sizeof(rgba_32u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_INT;        						break;
		case imDF::DF_BGRA_32u:     			spp = sizeof(bgra_32u)    			; bpp = 8*sizeof(bgra_32u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_32u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_UNSIGNED_INT;        						break;
		case imDF::DF_ARGB_32u:     			spp = sizeof(argb_32u)    			; bpp = 8*sizeof(argb_32u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_UNSIGNED_INT;        						break;
		case imDF::DF_ABGR_32u:     			spp = sizeof(abgr_32u)    			; bpp = 8*sizeof(abgr_32u)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_UNSIGNED_INT;        						break;
		//case imDF::DF_RGBA_32s:     			spp = sizeof(rgba_32s)    			; bpp = 8*sizeof(rgba_32s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_INT;        						break;
		//case imDF::DF_BGRA_32s:     			spp = sizeof(bgra_32s)    			; bpp = 8*sizeof(bgra_32s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_32s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_INT;        						break;
		//case imDF::DF_ARGB_32s:     			spp = sizeof(argb_32s)    			; bpp = 8*sizeof(argb_32s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_INT;        						break;
		//case imDF::DF_ABGR_32s:     			spp = sizeof(abgr_32s)    			; bpp = 8*sizeof(abgr_32s)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32s;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_INT;        						break;
		case imDF::DF_RGBA_32f:     			spp = sizeof(rgba_32f)    			; bpp = 8*sizeof(rgba_32f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_FLOAT;        						break;
		case imDF::DF_BGRA_32f:     			spp = sizeof(bgra_32f)    			; bpp = 8*sizeof(bgra_32f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_32f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_FLOAT;        						break;
		case imDF::DF_ARGB_32f:     			spp = sizeof(argb_32f)    			; bpp = 8*sizeof(argb_32f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_FLOAT;        						break;
		case imDF::DF_ABGR_32f:     			spp = sizeof(abgr_32f)    			; bpp = 8*sizeof(abgr_32f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_32f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_FLOAT;        						break;
		//case imDF::DF_RGBA_64f:     			spp = sizeof(rgba_64f)    			; bpp = 8*sizeof(rgba_64f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_64f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_DOUBLE;        						break;
		//case imDF::DF_BGRA_64f:     			spp = sizeof(bgra_64f)    			; bpp = 8*sizeof(bgra_64f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_64f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_DOUBLE;        						break;
		//case imDF::DF_ARGB_64f:     			spp = sizeof(argb_64f)    			; bpp = 8*sizeof(argb_64f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_64f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_DOUBLE;        						break;
		//case imDF::DF_ABGR_64f:     			spp = sizeof(abgr_64f)    			; bpp = 8*sizeof(abgr_64f)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_64f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_DOUBLE;        						break;
		case imDF::DF_RGBE_9995f:     			spp = sizeof(rgb_9995f)    			; bpp = 8*sizeof(rgb_9995f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_ERGB_5999f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_NONE;        						break;
		case imDF::DF_ERGB_5999f:     			spp = sizeof(bgr_5999f)    			; bpp = 8*sizeof(bgr_5999f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_ERGB_5999f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_UNSIGNED_INT_5_9_9_9_REV;        						break;
		case imDF::DF_RGBA_10_10_10_2:     			spp = sizeof(rgba_10_10_10_2)    			; bpp = 8*sizeof(rgba_10_10_10_2)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_10_10_10_2;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_INT_10_10_10_2;        						break;
		case imDF::DF_ABGR_2_10_10_10:     			spp = sizeof(abgr_2_10_10_10)    			; bpp = 8*sizeof(abgr_2_10_10_10)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_ABGR_2_10_10_10;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_NONE;      					glType = imGLType::GL_UNSIGNED_INT_2_10_10_10_REV;        						break;
		case imDF::DF_RGB_11_11_10f:     			spp = sizeof(rgb_11_11_10f)    			; bpp = 8*sizeof(rgb_11_11_10f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_10_11_11f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_NONE;        						break;
		case imDF::DF_BGR_10_11_11f:     			spp = sizeof(bgr_10_11_11f)    			; bpp = 8*sizeof(bgr_10_11_11f)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_10_11_11f;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_UNSIGNED_INT_10F_11F_11F_REV;        						break;
		case imDF::DF_DS_24_8:     			spp = sizeof(rg_24_8)    			; bpp = 8*sizeof(rg_24_8)        			; chanels = 2;      				hasAlpha = false;      				glDataFormat = imDF::DF_DS_24_8;       	glInternalFormat = imGLIFormat::GL_IFORMAT_D24_S8;      			glFormat = imGLFormat::GL_FORMAT_DS;      					glType = imGLType::GL_UNSIGNED_INT_24_8;        						break;
		case imDF::DF_LA_4:     			spp = sizeof(rg_4)    			; bpp = 8*sizeof(rg_4)        			; chanels = 2;      				hasAlpha = true;      				glDataFormat = imDF::DF_LA_8u;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RG;      			glFormat = imGLFormat::GL_FORMAT_RG;      					glType = imGLType::GL_NONE;        						break;
		case imDF::DF_RGB_332:     			spp = sizeof(rgb_332)    			; bpp = 8*sizeof(rgb_332)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_332;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_UNSIGNED_BYTE_3_3_2;        						break;
		case imDF::DF_BGR_233:     			spp = sizeof(bgr_233)    			; bpp = 8*sizeof(bgr_233)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_233;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_UNSIGNED_BYTE_2_3_3_REV;        						break;
		case imDF::DF_RGB_422:     			spp = sizeof(rgb_422)    			; bpp = 8*sizeof(rgb_422)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_422;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_422_EXT;        						break;
		case imDF::DF_BGR_224:     			spp = sizeof(bgr_224)    			; bpp = 8*sizeof(bgr_224)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_224;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_422_REV_EXT;        						break;
		case imDF::DF_RGB_565:     			spp = sizeof(rgb_565)    			; bpp = 8*sizeof(rgb_565)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_RGB_565;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_RGB;      					glType = imGLType::GL_UNSIGNED_SHORT_5_6_5;        						break;
		case imDF::DF_BGR_565:     			spp = sizeof(bgr_565)    			; bpp = 8*sizeof(bgr_565)        			; chanels = 3;      				hasAlpha = false;      				glDataFormat = imDF::DF_BGR_565;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGB;      			glFormat = imGLFormat::GL_FORMAT_BGR;      					glType = imGLType::GL_UNSIGNED_SHORT_5_6_5_REV;        						break;
		case imDF::DF_RGBA_5551:     			spp = sizeof(rgba_5551)    			; bpp = 8*sizeof(rgba_5551)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_5551;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_SHORT_5_5_5_1;        						break;
		case imDF::DF_ARGB_1555:     			spp = sizeof(argb_1555)    			; bpp = 8*sizeof(argb_1555)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_ARGB_1555;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_UNSIGNED_SHORT_1_5_5_5_REV;        						break;
		case imDF::DF_BGRA_5551:     			spp = sizeof(bgra_5551)    			; bpp = 8*sizeof(bgra_5551)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_5551;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_UNSIGNED_SHORT_5_5_5_1;        						break;
		case imDF::DF_ABGR_1555:     			spp = sizeof(abgr_1555)    			; bpp = 8*sizeof(abgr_1555)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_ABGR_1555;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_SHORT_1_5_5_5_REV;        						break;
		case imDF::DF_RGBA_4:     			spp = sizeof(rgba_4)    			; bpp = 8*sizeof(rgba_4)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_RGBA_4;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_SHORT_4_4_4_4;        						break;
		case imDF::DF_ARGB_4:     			spp = sizeof(argb_4)    			; bpp = 8*sizeof(argb_4)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_ARGB_4;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_UNSIGNED_SHORT_4_4_4_4_REV;        						break;
		case imDF::DF_BGRA_4:     			spp = sizeof(bgra_4)    			; bpp = 8*sizeof(bgra_4)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_BGRA_4;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_BGRA;      					glType = imGLType::GL_UNSIGNED_SHORT_4_4_4_4;        						break;
		case imDF::DF_ABGR_4:     			spp = sizeof(abgr_4)    			; bpp = 8*sizeof(abgr_4)        			; chanels = 4;      				hasAlpha = true;      				glDataFormat = imDF::DF_ABGR_4;       	glInternalFormat = imGLIFormat::GL_IFORMAT_RGBA;      			glFormat = imGLFormat::GL_FORMAT_RGBA;      					glType = imGLType::GL_UNSIGNED_SHORT_4_4_4_4_REV;        						break;
